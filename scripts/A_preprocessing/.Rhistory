groupColors <- list_of_colors[1:length(unique(pData(data)$treatment))]
names(groupColors) <- unique(pData(data)$treatment)
mzr1 <- c(519.10, 519.12)
rtw1 <- c(19.8*60, 20.40*60)
data %>%
filterRt(rt = rtw1) %>%
filterMz(mz = mzr1) %>%
chromatogram(., aggregationFun="max") %>%
plot(., col = groupColors,
ylab="Intensity", xlab="Retention Time (sec)",
font.lab=1, cex.lab=1, cex.axis=1, font.main=1, cex.main=1, lwd = 2)
View(metadata)
## Set the CentWaveParam object
cwp <- CentWaveParam(
peakwidth = c(10, 50),
ppm = 25, # default
snthresh = 3, # default
noise = 0=1.7e5,
mzdiff = -0.001,
prefilter = c(1, 100)
)
## Set the CentWaveParam object
cwp <- CentWaveParam(
peakwidth = c(10, 50),
ppm = 25, # default
snthresh = 0, # default
noise = 2.5e5,
mzdiff = -0.001,
prefilter = c(1, 100)
)
data_cent %>%
filterRt(rt = c(900, 1200)) %>%
filterMz(mz = c(300, 600)) %>%
chromatogram(., aggregationFun="max") %>%
findChromPeaks(., param = cwp) %>%
plot(col = "indianred2",
ylab="Intensity", xlab="Retention Time (sec)",
font.lab=1, cex.lab=1, cex.axis=1, font.main=1, cex.main=1)
data %>%
filterRt(rt = c(900, 1200)) %>%
filterMz(mz = c(300, 600)) %>%
chromatogram(., aggregationFun="max") %>%
findChromPeaks(., param = cwp) %>%
plot(col = "indianred2",
ylab="Intensity", xlab="Retention Time (sec)",
font.lab=1, cex.lab=1, cex.axis=1, font.main=1, cex.main=1)
data_cent <- findChromPeaks(data_cent, param = cwp)
data_cent <- findChromPeaks(data, param = cwp)
chrom_peaks_df <- as.data.frame(chromPeaks(data_cent))
View(chrom_peaks_df)
n.peaks.sample <- chrom_peaks_df %>% count(sample)
View(n.peaks.sample)
chrom_peaks_df <- as.data.frame(chromPeaks(data))
data <- findChromPeaks(data, param = cwp)
chrom_peaks_df <- as.data.frame(chromPeaks(data))
n.peaks.sample <- chrom_peaks_df %>% count(sample)
View(n.peaks.sample)
View(chrom_peaks_df)
View(n.peaks.sample)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename('sample_index' = 'sample', 'total_peaks_detected' = 'n')
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample_index = sample, total_peaks_detected = n)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample_index = sample, total_peaks_detected = n)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) #%>%
View(chrom_peaks_df)
?rename
rename(sample_index = sample)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample_index = sample)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'new')
View(chrom_peaks_df)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = new)
pData(data)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'sample_index', n = 'total_peaks_detected')
View(chrom_peaks_df)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'sample_index', n = 'total_peaks_detected') %>%
left_join(rownames_to_column(pData(data_cent)), by = c('sample_index' = 'rowname'))
as.data.frame(chromPeaks(data))
?chromPeaks
str(pData(data))
View(pData())
View(pData(data))
str(rownames_to_column(pData(data)))
?rownames_to_column
str(rowid_to_column(pData(data)))
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'sample_index', n = 'total_peaks_detected') %>%
left_join(rowid_to_column(pData(data)), by = c('sample_index' = 'rowname'))
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'sample_index', n = 'total_peaks_detected') %>%
left_join(rowid_to_column(pData(data)), by = c('sample_index' = 'rowid'))
View(chrom_peaks_df)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'sample_index', n = 'total_peaks_detected') %>%
left_join(rowid_to_column(pData(data)), by = c('sample_index' = 'rowid')) %>%
select(sample_index, SampleID, total_peaks_detected)
View(chrom_peaks_df)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'sample_index', n = 'total_peaks_detected') %>%
left_join(rowid_to_column(pData(data)), by = c('sample_index' = 'rowid')) %>%
select(-Filename)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'sample_index', n = 'total_peaks_detected') %>%
left_join(rowid_to_column(pData(data)), by = c('sample_index' = 'rowid')) %>%
select(-FileName)
View(chrom_peaks_df)
plotChromPeakImage(data,
binSize=100,
xlab="Retention time (sec)",
col = colfunc(100),
cex.sub = 0.5,
yaxt = "n")
colfunc <- colorRampPalette(c("papayawhip", "chocolate4"))
plotChromPeakImage(data,
binSize=100,
xlab="Retention time (sec)",
col = colfunc(100),
cex.sub = 0.5,
yaxt = "n")
axis(2,
at = seq(0,1, length.out = 8),
labels = pData(data_cent)$SampleCode,
cex.axis = 1,
las = 2)
axis(2,
at = seq(0,1, length.out = 8),
labels = pData(data_cent)$SampleID,
cex.axis = 1,
las = 2)
axis(2,
at = seq(0,1, length.out = 8),
labels = pData(data)$SampleID,
cex.axis = 1,
las = 2)
axis(2,
at = seq(0,1, length.out = 4),
labels = pData(data)$SampleID,
cex.axis = 1,
las = 2)
plotChromPeakImage(data,
binSize=100,
xlab="Retention time (sec)",
col = colfunc(100),
cex.sub = 0.5,
yaxt = "n")
axis(2,
at = seq(0,1, length.out = 4),
labels = pData(data)$SampleID,
cex.axis = 1,
las = 2)
dev.off()
plotChromPeakImage(data,
binSize=100,
xlab="Retention time (sec)",
col = colfunc(100),
cex.sub = 0.5,
yaxt = "n")
axis(2,
at = seq(0,1, length.out = 4),
labels = pData(data)$SampleID,
cex.axis = 1,
las = 2)
pval <- c(0.0000001, 0.1, 0.2, 0.5)
p.adjust(pval, method = 'fdr')
pval <- c(0.0000001, 0.1, 0.2, 0.5, 0.1, rep(0.2, 40))
p.adjust(pval, method = 'fdr')
pval <- c(0.0000001, 0.1, 0.2, 0.5, 0.1, rep(0.2, 1000))
p.adjust(pval, method = 'fdr')
pval <- c(0.0000001, 0.1, 0.2, 0.5, 0.1, rep(0.2, 10000))
p.adjust(pval, method = 'fdr')[1:20]
p.adjust(0.00001, method = 'fdr')
pval <- c(0.00001, 0.1, 0.2, 0.5, 0.1, rep(0.2, 10000))
p.adjust(pval, method = 'fdr')[1:20]
BiocInstaller::install("Spectra")
BiocManager::install("Spectra")
library(RColorBrewer)
library(tidyverse)
library(xcms)
doParallel::registerDoParallel(10)
## customFunnctions.R is from "https://raw.githubusercontent.com/jorainer/xcms-gnps-tools/master/customFunctions.R"
source("https://raw.githubusercontent.com/jorainer/xcms-gnps-tools/master/customFunctions.R")
load("../../data/imported_data.RData")
list_of_colors <- brewer.pal(n = 4, name = 'Dark2')
## color for lines
groupColors <- list_of_colors[1:length(unique(pData(data)$treatment))]
names(groupColors) <- unique(pData(data)$treatment)
## Set the CentWaveParam object
cwp <- CentWaveParam(
peakwidth = c(10, 50),
ppm = 25, # default
snthresh = 0, # default
noise = 2.5e5,
mzdiff = -0.001,
prefilter = c(1, 100)
)
data %>%
filterRt(rt = c(900, 1200)) %>%
filterMz(mz = c(300, 600)) %>%
chromatogram(., aggregationFun="max") %>%
findChromPeaks(., param = cwp) %>%
plot(col = "indianred2",
ylab="Intensity", xlab="Retention Time (sec)",
font.lab=1, cex.lab=1, cex.axis=1, font.main=1, cex.main=1)
data <- findChromPeaks(data, param = cwp)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'sample_index', n = 'total_peaks_detected') %>%
left_join(rowid_to_column(pData(data)), by = c('sample_index' = 'rowid')) %>%
select(-FileName)
table_file <- file.path('tables', 'NumberDetectedPeaks_per_sample_e5.csv')
write.csv(x = n.peaks.sample, file = table_file, row.names = F)
figure_file <- file.path('images', 'ChromPeakImage_e4.png')
png(filename=figure_file,
bg = "white", width = 3000, height = 2000, res = 300)
par(mar=c(5,6,1,1)) # c(bottom, left, top, right)
colfunc <- colorRampPalette(c("papayawhip", "chocolate4"))
plotChromPeakImage(data,
binSize=100,
xlab="Retention time (sec)",
col = colfunc(100),
cex.sub = 0.5,
yaxt = "n")
axis(2,
at = seq(0,1, length.out = 4),
labels = pData(data)$SampleID,
cex.axis = 1,
las = 2)
dev.off()
plotChromPeakImage(data,
binSize=100,
xlab="Retention time (sec)",
col = colfunc(100),
cex.sub = 0.5,
yaxt = "n")
## Group peaks (these parameters will be used in correspondence too)
mfraction <- 0.5
min_samples <-  1
bandwith <- 30 # default 30, it's bandwidth (standard deviation ot the smoothing kernel)
size_overlap_slices <-  0.25 # default
## a - define PeakDensityParam
pdp <- PeakDensityParam(sampleGroups = data_cent$Sample_type,
bw = bandwith,
minFraction = mfraction,
minSamples = min_samples,
binSize = size_overlap_slices)
## Retention time correction using default parameters
## b - define PeakGroupsParam
pgp <- PeakGroupsParam(minFraction = mfraction)
## Group peaks (these parameters will be used in correspondence too)
mfraction <- 0.5
min_samples <-  1
bandwith <- 30 # default 30, it's bandwidth (standard deviation ot the smoothing kernel)
size_overlap_slices <-  0.25 # default
## a - define PeakDensityParam
pdp <- PeakDensityParam(sampleGroups = data$SampleID,
bw = bandwith,
minFraction = mfraction,
minSamples = min_samples,
binSize = size_overlap_slices)
## Retention time correction using default parameters
## b - define PeakGroupsParam
pgp <- PeakGroupsParam(minFraction = mfraction)
## a - Group peaks
data <- groupChromPeaks(data, pdp)
## b - alignment
data <- adjustRtime(data, param = pgp)
## test if object has adjusted retention time
hasAdjustedRtime(data_cent)
## test if object has adjusted retention time
hasAdjustedRtime(data)
## define PeakDensityParam
pdp <- PeakDensityParam(sampleGroups= data$SampleID,
bw = bandwith,
minFraction = mfraction,
binSize = size_overlap_slices)
## perform correspondence analysis
data <- groupChromPeaks(data, param=metadata)
library(RColorBrewer)
library(tidyverse)
library(xcms)
doParallel::registerDoParallel(10)
## customFunnctions.R is from "https://raw.githubusercontent.com/jorainer/xcms-gnps-tools/master/customFunctions.R"
source("https://raw.githubusercontent.com/jorainer/xcms-gnps-tools/master/customFunctions.R")
load("../../data/imported_data.RData")
list_of_colors <- brewer.pal(n = 4, name = 'Dark2')
## color for lines
groupColors <- list_of_colors[1:length(unique(pData(data)$treatment))]
names(groupColors) <- unique(pData(data)$treatment)
## Set the CentWaveParam object
cwp <- CentWaveParam(
peakwidth = c(10, 50),
ppm = 25, # default
snthresh = 0, # default
noise = 1.4e4,
mzdiff = -0.001,
prefilter = c(1, 100)
)
data <- findChromPeaks(data, param = cwp)
chrom_peaks_df <- as.data.frame(chromPeaks(data)) %>%
count(sample) %>%
rename(sample = 'sample_index', n = 'total_peaks_detected') %>%
left_join(rowid_to_column(pData(data)), by = c('sample_index' = 'rowid')) %>%
select(-FileName)
View(chrom_peaks_df)
chrom_peaks_df
plotChromPeakImage(data,
binSize=100,
xlab="Retention time (sec)",
col = colfunc(100),
cex.sub = 0.5,
yaxt = "n")
colfunc <- colorRampPalette(c("papayawhip", "chocolate4"))
plotChromPeakImage(data,
binSize=100,
xlab="Retention time (sec)",
col = colfunc(100),
cex.sub = 0.5,
yaxt = "n")
axis(2,
at = seq(0,1, length.out = 4),
labels = pData(data)$SampleID,
cex.axis = 1,
las = 2)
## Group peaks (these parameters will be used in correspondence too)
mfraction <- 0.5
min_samples <-  1
bandwith <- 30 # default 30, it's bandwidth (standard deviation ot the smoothing kernel)
size_overlap_slices <-  0.25 # default
## a - define PeakDensityParam
pdp <- PeakDensityParam(sampleGroups = data$SampleID,
bw = bandwith,
minFraction = mfraction,
minSamples = min_samples,
binSize = size_overlap_slices)
## Retention time correction using default parameters
## b - define PeakGroupsParam
pgp <- PeakGroupsParam(minFraction = mfraction)
rtw <- c(500, 1300)
# not adjusted
data %>%
filterRt(rt = rtw) %>%
groupChromPeaks(., pdp) %>%
plotAdjustedRtime(.,
col = groupColors,
xlab="Retention Time (sec)",
font.lab=2, cex.lab=2, cex.axis=2,
font.main=2, cex.main=2, lwd=2)
## adjusted
data %>%
filterRt(rt = rtw) %>%
groupChromPeaks(., pdp) %>%
adjustRtime(., param = pgp) %>%
plotAdjustedRtime(.,
col = groupColors,
xlab="Retention Time (sec)",
font.lab=2, cex.lab=2, cex.axis=2,
font.main=2, cex.main=2, lwd=2)
## a - Group peaks
data <- groupChromPeaks(data, pdp)
## b - alignment
data <- adjustRtime(data, param = pgp)
t
## test if object has adjusted retention time
hasAdjustedRtime(data)
## define PeakDensityParam
pdp <- PeakDensityParam(sampleGroups= data$SampleID,
bw = bandwith,
minFraction = mfraction,
binSize = size_overlap_slices)
data %>%
filterRt(rt = rtw5) %>%
filterMz(mz = mzr5) %>%
chromatogram(., aggregationFun="max") %>%
plotChromPeakDensity(., param=pdp)
data %>%
filterRt(rt = c(900, 1200)) %>%
filterMz(mz = mzr5c(300, 600), aggregationFun="max") %>%
plotChromPeakDensity(., param=pdp)
data %>%
filterRt(rt = c(900, 1200)) %>%
filterMz(mz = c(300, 600), aggregationFun="max") %>%
plotChromPeakDensity(., param=pdp)
## perform correspondence analysis
data <- groupChromPeaks(data, param=metadata)
## perform correspondence analysis
data <- groupChromPeaks(data, param=pdp)
## determine the number of missing values
number_na_i = sum(is.na(featureValues(data_cent)))
number_na_i
## determine the number of missing values
number_na_i = sum(is.na(featureValues(data)))
number_na_i
## a - define parameter
fpp <- FillChromPeaksParam(ppm = 2, expandMz = 0.25)
## a - define parameter
fpp <- FillChromPeaksParam(ppm = 2, expandMz = 0.25)
## b - fill in
data <- fillChromPeaks(data, param=fpp)
## remaining number of na values
number_na_f = sum(is.na(featureValues(data)))
## determine number of filled peaks
number_na_i - number_na_f
## extract feature values after filling in
fmat_fld <- featureValues(data_cent, value="into", method="maxint")
## extract feature values after filling in
fmat_fld <- featureValues(data, value="into", method="maxint")
## replace NA with zero
fmat_fld[is.na(fmat_fld)] <- 0
## replace colnames with samplecode
fmat_fld <- as.data.frame(fmat_fld)
colnames(fmat_fld) <- as.vector(metadata$SampleID)
View(fmat_fld)
## get feature definitions and intensities
featuresDef <- featureDefinitions(data)
## merge feature definitions with correspondencce
dataTable <- merge(featuresDef, fmat_fld, by = 0, all = TRUE)
dataTable <- dataTable[, !(colnames(dataTable) %in% c("peakidx"))]
colnames(dataTable)[1] <- "Features"
View(dataTable)
View(featuresDef)
as.data.frame(dataTable)
head(as.data.frame(featuresDef))
# I modified the source function to write the feature name as the title of each MS2
source('modified_writeMgfData.R')
## export the individual spectra into a .mgf file
filteredMs2Spectra <- featureSpectra(data, return.type = "Spectra", msLevel = 2)
filteredMs2Spectra <- clean(filteredMs2Spectra, all = TRUE)
?clean
?featureSpectra
?clean
BiocManager::install("xcms")
BiocManager::install("xcms", force = TRUE)
BiocManager::install("MSnbase")
?featureSpectra
?xcms::clean()
filteredMs2Spectra <- xcms::clean(filteredMs2Spectra, all = TRUE)
?clean
View(filteredMs2Spectra)
## export the individual spectra into a .mgf file
filteredMs2Spectra <- featureSpectra(data, return.type = "MSpectra", msLevel = 2)
filteredMs2Spectra <- clean(filteredMs2Spectra, all = TRUE)
filteredMs2Spectra <- formatSpectraForGNPS(filteredMs2Spectra) # this is one of the custom funtions
filteredMs2Spectra_consensus <- combineSpectra(filteredMs2Spectra,
fcol = "feature_id",
method = consensusSpectrum,
mzd = 0,
minProp = 0.5,
ppm = 25,
intensityFun = median,
mzFun = median)
View(filteredMs2Spectra_consensus)
## export the individual spectra into a .mgf file
filteredMs2Spectra <- featureSpectra(data, return.type = "MSpectra", msLevel = 2)
filteredMs2Spectra <- clean(filteredMs2Spectra, all = TRUE)
filteredMs2Spectra <- formatSpectraForGNPS(filteredMs2Spectra) # this is one of the custom funtions
filteredMs2Spectra_consensus <- combineSpectra(filteredMs2Spectra,
fcol = "feature_id",
method = consensusSpectrum,
mzd = 0,
minProp = 0.5,
ppm = 25,
intensityFun = median,
mzFun = median)
mod_writeMgfDataFile(filteredMs2Spectra_consensus,
"ms2spectra_consensus.mgf")
View(filteredMs2Spectra_consensus)
str(filteredMs2Spectra)
?combineSpectra
View(fmat_fld)
## extract feature values after filling in
fmat_fld <- as.data.frame(featureValues(data, value="into", method="maxint"))
View(fmat_fld)
## extract feature values after filling in
fmat_fld <- as.data.frame(featureValues(data, value="into", method="maxint"))
View(fmat_fld)
rm(fmt_fld)
rm(fmat_fld)
## extract feature values after filling in
fmat_fld <- as.data.frame(featureValues(data, value="into", method="maxint"))
View(fmat_fld)
## get feature definitions and intensities
featuresDef <- as.data.frame(featureDefinitions(data))
View(featuresDef)
?featureValues
colnames(fmat_fld)
colnames(fmat_fld)[,-1]
colnames(fmat_fld)[-1]
View(featuresDef)
## spectra information of pre-processed data
## these data are useful for cloud plots
fdata <- fData(data)
View(fdata)
